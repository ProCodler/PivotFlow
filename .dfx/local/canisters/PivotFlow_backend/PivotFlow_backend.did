type User = 
 record {
   createdAt: Time;
   isOperator: bool;
   lastLogin: Time;
   "principal": Principal;
 };
type Time = int;
type PriorityTier = 
 variant {
   fast;
   slow;
   standard;
 };
type Principal = principal;
type NetworkFee = 
 record {
   blockchain: text;
   fast: FeeInfo;
   icon: text;
   lastUpdated: Time;
   slow: FeeInfo;
   standard: FeeInfo;
 };
type NFTAlert = 
 record {
   alertType: AlertType;
   collectionName: text;
   collectionSlug: text;
   createdAt: Time;
   currency: text;
   currentFloorPrice: float64;
   gasLimit: opt nat;
   id: text;
   isActive: bool;
   lastChecked: Time;
   percentageChange: opt float64;
   targetPrice: float64;
   userId: Principal;
 };
type GasAlert = 
 record {
   blockchain: text;
   createdAt: Time;
   id: text;
   isActive: bool;
   maxGwei: nat;
   priorityTier: PriorityTier;
   userId: Principal;
 };
type FeeInfo = 
 record {
   gwei: float64;
   usd: float64;
 };
type AlertType = 
 variant {
   any_change;
   drop_below;
   rise_above;
 };
service : {
  createGasAlert: (blockchain: text, maxGwei: nat, priorityTier:
   PriorityTier) -> (GasAlert);
  createNFTAlert: (collectionSlug: text, collectionName: text, alertType:
   AlertType, targetPrice: float64, currency: text) -> (NFTAlert);
  createUser: (_username: text) -> (User);
  getNetworkFees: () -> (vec NetworkFee) query;
  getUser: () -> (opt User);
  getUserGasAlerts: () -> (vec GasAlert);
  getUserNFTAlerts: () -> (vec NFTAlert);
  updateNetworkFee: (blockchain: text, fast: FeeInfo, standard: FeeInfo,
   slow: FeeInfo) -> (NetworkFee);
}
